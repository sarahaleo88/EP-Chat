name: 🚀 Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

# Default permissions (least privilege)
permissions:
  contents: read

jobs:
  deploy-vercel:
    name: 🌐 Deploy to Vercel
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 📦 Checkout repository
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: 📥 Install dependencies
      run: npm ci

    - name: 🔨 Build application
      run: npm run build
      env:
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}

    - name: 🚀 Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.ORG_ID }}
        vercel-project-id: ${{ secrets.PROJECT_ID }}
        vercel-args: '--prod'

  docker-build:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: 📦 Checkout repository
      uses: actions/checkout@v4

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: your-dockerhub-username/ep-enhanced-prompt
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🐳 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    name: 📦 Create Signed Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [docker-build]
    permissions:
      contents: write
      id-token: write  # For Sigstore signing

    steps:
    - name: 📦 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for release notes

    - name: 🟢 Setup Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: 📥 Install dependencies
      run: npm ci

    - name: 🔨 Build release assets
      run: |
        npm run build
        tar -czf ep-chat-${{ github.ref_name }}.tar.gz .next/ public/ package.json package-lock.json README.md

    - name: 📋 Generate checksums
      id: checksums
      run: |
        sha256sum ep-chat-${{ github.ref_name }}.tar.gz > checksums.txt
        echo "checksum=$(cat checksums.txt)" >> $GITHUB_OUTPUT

    - name: ✍️ Sign release with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.1
      with:
        inputs: ./ep-chat-${{ github.ref_name }}.tar.gz ./checksums.txt

    - name: 📋 Generate SBOM
      run: |
        npm install -g @cyclonedx/cyclonedx-npm
        cyclonedx-npm --output-file sbom.json
        
    - name: 📋 Generate release notes
      id: release_notes
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        cat > release_notes.md << 'EOF'
        ## 🍀 EP Chat ${VERSION}
        
        ### 📦 Release Assets
        - \`ep-chat-${VERSION}.tar.gz\` - Production build package
        - \`checksums.txt\` - SHA256 checksums
        - \`sbom.json\` - Software Bill of Materials (SBOM)
        - Sigstore signatures included for all assets
        
        ### 🔐 Verification
        ```bash
        # Verify checksums
        sha256sum -c checksums.txt
        
        # Verify Sigstore signatures
        cosign verify-blob --bundle ep-chat-${VERSION}.tar.gz.sigstore.json ep-chat-${VERSION}.tar.gz
        ```
        
        ### 📊 Security & Compliance
        - ✅ OpenSSF Security Baseline compliant
        - ✅ EU Cyber Resilience Act (CRA) aligned
        - ✅ SBOM included for dependency transparency
        - ✅ Cryptographically signed release
        
        ### 📝 Changes
        EOF
        
        # Add commit messages since last tag
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")..HEAD >> release_notes.md

    - name: 🎉 Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: EP Chat ${{ steps.release_notes.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false

    - name: 📤 Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./ep-chat-${{ github.ref_name }}.tar.gz
        asset_name: ep-chat-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip

    - name: 📤 Upload checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain

    - name: 📤 Upload SBOM
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./sbom.json
        asset_name: sbom.json
        asset_content_type: application/json