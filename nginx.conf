# EP Chat Nginx Configuration
# Optimized for long-text streaming and SSE support

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Optimize for high concurrency
events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Basic optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Gzip compression (disabled for SSE)
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=30r/m;
    limit_req_zone $binary_remote_addr zone=static:10m rate=100r/m;

    # Upstream configuration for EP Chat
    upstream ep-chat-backend {
        server ep-app:3000;
        keepalive 32;
        keepalive_requests 1000;
        keepalive_timeout 60s;
    }

    # Main server configuration
    server {
        listen 80;
        listen [::]:80;
        server_name localhost ai.saraha.cc;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Root and index
        root /var/www/html;
        index index.html;

        # Client body size for large requests
        client_max_body_size 20M;
        client_body_buffer_size 128k;
        client_header_buffer_size 4k;
        large_client_header_buffers 4 16k;

        # Timeouts optimized for long-text generation
        client_body_timeout 300s;
        client_header_timeout 60s;
        send_timeout 300s;

        # Proxy timeouts for long-running requests (v3.1 optimized)
        proxy_connect_timeout 60s;
        proxy_send_timeout 7200s;      # 2 hours for ultra-long generation
        proxy_read_timeout 7200s;      # 2 hours for ultra-long generation
        proxy_next_upstream_timeout 0;

        # Proxy buffering settings for streaming
        proxy_buffering off;           # Disable buffering for SSE
        proxy_cache off;               # Disable caching for dynamic content
        proxy_request_buffering off;   # Stream request body
        
        # HTTP/1.1 and connection settings
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;

        # API routes - optimized for streaming
        location /api/ {
            # Rate limiting for API calls
            limit_req zone=api burst=10 nodelay;

            # Special handling for streaming endpoints
            location ~* /api/(generate|chat) {
                # No buffering for streaming responses
                proxy_buffering off;
                proxy_cache off;
                proxy_request_buffering off;

                # Extended timeouts for long text generation (v3.1)
                proxy_connect_timeout 60s;
                proxy_send_timeout 7200s;
                proxy_read_timeout 7200s;

                # SSE specific headers
                proxy_set_header Accept "text/event-stream";
                proxy_set_header Cache-Control "no-cache";
                add_header X-Accel-Buffering no;

                # Chunked transfer encoding
                chunked_transfer_encoding on;

                proxy_pass http://ep-chat-backend;
            }

            # Monitoring endpoints
            location ~* /api/(metrics|cost-report|preflight) {
                # No rate limiting for monitoring
                proxy_buffering off;
                proxy_cache off;

                # Standard timeouts for monitoring
                proxy_connect_timeout 30s;
                proxy_send_timeout 60s;
                proxy_read_timeout 60s;

                proxy_pass http://ep-chat-backend;
            }

            # Regular API endpoints
            proxy_pass http://ep-chat-backend;
        }

        # Static files with caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            limit_req zone=static burst=50 nodelay;
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";
            
            # Try static files first, then proxy to Next.js
            try_files $uri @nextjs;
        }

        # Next.js static files and pages
        location @nextjs {
            proxy_pass http://ep-chat-backend;
        }

        # Main application routes
        location / {
            # Try static files first, then proxy to Next.js
            try_files $uri $uri/ @nextjs;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Deny access to sensitive files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # HTTPS server configuration (for production)
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name ai.saraha.cc;

        # SSL configuration
        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;

        # Modern SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # HSTS
        add_header Strict-Transport-Security "max-age=63072000" always;

        # Include the same configuration as HTTP server
        include /etc/nginx/conf.d/ep-chat-common.conf;
    }

    # HTTP to HTTPS redirect
    server {
        listen 80;
        listen [::]:80;
        server_name ai.saraha.cc;
        return 301 https://$server_name$request_uri;
    }
}
